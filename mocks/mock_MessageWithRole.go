// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	golm "github.com/a-novel-kit/golm"
	mock "github.com/stretchr/testify/mock"
)

// MockMessageWithRole is an autogenerated mock type for the MessageWithRole type
type MockMessageWithRole struct {
	mock.Mock
}

type MockMessageWithRole_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageWithRole) EXPECT() *MockMessageWithRole_Expecter {
	return &MockMessageWithRole_Expecter{mock: &_m.Mock}
}

// GetContent provides a mock function with no fields
func (_m *MockMessageWithRole) GetContent() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContent")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMessageWithRole_GetContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContent'
type MockMessageWithRole_GetContent_Call struct {
	*mock.Call
}

// GetContent is a helper method to define mock.On call
func (_e *MockMessageWithRole_Expecter) GetContent() *MockMessageWithRole_GetContent_Call {
	return &MockMessageWithRole_GetContent_Call{Call: _e.mock.On("GetContent")}
}

func (_c *MockMessageWithRole_GetContent_Call) Run(run func()) *MockMessageWithRole_GetContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageWithRole_GetContent_Call) Return(_a0 string) *MockMessageWithRole_GetContent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageWithRole_GetContent_Call) RunAndReturn(run func() string) *MockMessageWithRole_GetContent_Call {
	_c.Call.Return(run)
	return _c
}

// Role provides a mock function with no fields
func (_m *MockMessageWithRole) Role() golm.MessageRole {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Role")
	}

	var r0 golm.MessageRole
	if rf, ok := ret.Get(0).(func() golm.MessageRole); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(golm.MessageRole)
	}

	return r0
}

// MockMessageWithRole_Role_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Role'
type MockMessageWithRole_Role_Call struct {
	*mock.Call
}

// Role is a helper method to define mock.On call
func (_e *MockMessageWithRole_Expecter) Role() *MockMessageWithRole_Role_Call {
	return &MockMessageWithRole_Role_Call{Call: _e.mock.On("Role")}
}

func (_c *MockMessageWithRole_Role_Call) Run(run func()) *MockMessageWithRole_Role_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageWithRole_Role_Call) Return(_a0 golm.MessageRole) *MockMessageWithRole_Role_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageWithRole_Role_Call) RunAndReturn(run func() golm.MessageRole) *MockMessageWithRole_Role_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageWithRole creates a new instance of MockMessageWithRole. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageWithRole(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageWithRole {
	mock := &MockMessageWithRole{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
