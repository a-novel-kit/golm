// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	models "github.com/a-novel-kit/golm/bindings/groq/models"
	mock "github.com/stretchr/testify/mock"
)

// MockMultipartMessagePart is an autogenerated mock type for the MultipartMessagePart type
type MockMultipartMessagePart struct {
	mock.Mock
}

type MockMultipartMessagePart_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMultipartMessagePart) EXPECT() *MockMultipartMessagePart_Expecter {
	return &MockMultipartMessagePart_Expecter{mock: &_m.Mock}
}

// MultipartMessagePart provides a mock function with no fields
func (_m *MockMultipartMessagePart) MultipartMessagePart() models.MultipartMessagePart {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MultipartMessagePart")
	}

	var r0 models.MultipartMessagePart
	if rf, ok := ret.Get(0).(func() models.MultipartMessagePart); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.MultipartMessagePart)
		}
	}

	return r0
}

// MockMultipartMessagePart_MultipartMessagePart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultipartMessagePart'
type MockMultipartMessagePart_MultipartMessagePart_Call struct {
	*mock.Call
}

// MultipartMessagePart is a helper method to define mock.On call
func (_e *MockMultipartMessagePart_Expecter) MultipartMessagePart() *MockMultipartMessagePart_MultipartMessagePart_Call {
	return &MockMultipartMessagePart_MultipartMessagePart_Call{Call: _e.mock.On("MultipartMessagePart")}
}

func (_c *MockMultipartMessagePart_MultipartMessagePart_Call) Run(run func()) *MockMultipartMessagePart_MultipartMessagePart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultipartMessagePart_MultipartMessagePart_Call) Return(_a0 models.MultipartMessagePart) *MockMultipartMessagePart_MultipartMessagePart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMultipartMessagePart_MultipartMessagePart_Call) RunAndReturn(run func() models.MultipartMessagePart) *MockMultipartMessagePart_MultipartMessagePart_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMultipartMessagePart creates a new instance of MockMultipartMessagePart. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMultipartMessagePart(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMultipartMessagePart {
	mock := &MockMultipartMessagePart{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
