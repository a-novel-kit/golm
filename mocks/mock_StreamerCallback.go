// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStreamerCallback is an autogenerated mock type for the StreamerCallback type
type MockStreamerCallback[Data any] struct {
	mock.Mock
}

type MockStreamerCallback_Expecter[Data any] struct {
	mock *mock.Mock
}

func (_m *MockStreamerCallback[Data]) EXPECT() *MockStreamerCallback_Expecter[Data] {
	return &MockStreamerCallback_Expecter[Data]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, inC
func (_m *MockStreamerCallback[Data]) Execute(ctx context.Context, inC chan<- Data) error {
	ret := _m.Called(ctx, inC)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- Data) error); ok {
		r0 = rf(ctx, inC)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStreamerCallback_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockStreamerCallback_Execute_Call[Data any] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - inC chan<- Data
func (_e *MockStreamerCallback_Expecter[Data]) Execute(ctx interface{}, inC interface{}) *MockStreamerCallback_Execute_Call[Data] {
	return &MockStreamerCallback_Execute_Call[Data]{Call: _e.mock.On("Execute", ctx, inC)}
}

func (_c *MockStreamerCallback_Execute_Call[Data]) Run(run func(ctx context.Context, inC chan<- Data)) *MockStreamerCallback_Execute_Call[Data] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan<- Data))
	})
	return _c
}

func (_c *MockStreamerCallback_Execute_Call[Data]) Return(_a0 error) *MockStreamerCallback_Execute_Call[Data] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamerCallback_Execute_Call[Data]) RunAndReturn(run func(context.Context, chan<- Data) error) *MockStreamerCallback_Execute_Call[Data] {
	_c.Call.Return(run)
	return _c
}

// NewMockStreamerCallback creates a new instance of MockStreamerCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStreamerCallback[Data any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStreamerCallback[Data] {
	mock := &MockStreamerCallback[Data]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
