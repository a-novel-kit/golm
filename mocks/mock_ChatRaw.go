// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockChatRaw is an autogenerated mock type for the ChatRaw type
type MockChatRaw[RawRequest any, RawResponse any] struct {
	mock.Mock
}

type MockChatRaw_Expecter[RawRequest any, RawResponse any] struct {
	mock *mock.Mock
}

func (_m *MockChatRaw[RawRequest, RawResponse]) EXPECT() *MockChatRaw_Expecter[RawRequest, RawResponse] {
	return &MockChatRaw_Expecter[RawRequest, RawResponse]{mock: &_m.Mock}
}

// RawQuery provides a mock function with given fields: ctx, request
func (_m *MockChatRaw[RawRequest, RawResponse]) RawQuery(ctx context.Context, request RawRequest) (RawResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RawQuery")
	}

	var r0 RawResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, RawRequest) (RawResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, RawRequest) RawResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RawResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, RawRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatRaw_RawQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawQuery'
type MockChatRaw_RawQuery_Call[RawRequest any, RawResponse any] struct {
	*mock.Call
}

// RawQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - request RawRequest
func (_e *MockChatRaw_Expecter[RawRequest, RawResponse]) RawQuery(ctx interface{}, request interface{}) *MockChatRaw_RawQuery_Call[RawRequest, RawResponse] {
	return &MockChatRaw_RawQuery_Call[RawRequest, RawResponse]{Call: _e.mock.On("RawQuery", ctx, request)}
}

func (_c *MockChatRaw_RawQuery_Call[RawRequest, RawResponse]) Run(run func(ctx context.Context, request RawRequest)) *MockChatRaw_RawQuery_Call[RawRequest, RawResponse] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(RawRequest))
	})
	return _c
}

func (_c *MockChatRaw_RawQuery_Call[RawRequest, RawResponse]) Return(response RawResponse, err error) *MockChatRaw_RawQuery_Call[RawRequest, RawResponse] {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockChatRaw_RawQuery_Call[RawRequest, RawResponse]) RunAndReturn(run func(context.Context, RawRequest) (RawResponse, error)) *MockChatRaw_RawQuery_Call[RawRequest, RawResponse] {
	_c.Call.Return(run)
	return _c
}

// NewMockChatRaw creates a new instance of MockChatRaw. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChatRaw[RawRequest any, RawResponse any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChatRaw[RawRequest, RawResponse] {
	mock := &MockChatRaw[RawRequest, RawResponse]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
