// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	models "github.com/a-novel-kit/golm/bindings/groq/models"
	mock "github.com/stretchr/testify/mock"
)

// MockMultipartMessage is an autogenerated mock type for the MultipartMessage type
type MockMultipartMessage struct {
	mock.Mock
}

type MockMultipartMessage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMultipartMessage) EXPECT() *MockMultipartMessage_Expecter {
	return &MockMultipartMessage_Expecter{mock: &_m.Mock}
}

// MultipartMessage provides a mock function with no fields
func (_m *MockMultipartMessage) MultipartMessage() models.MultipartMessage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MultipartMessage")
	}

	var r0 models.MultipartMessage
	if rf, ok := ret.Get(0).(func() models.MultipartMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.MultipartMessage)
		}
	}

	return r0
}

// MockMultipartMessage_MultipartMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultipartMessage'
type MockMultipartMessage_MultipartMessage_Call struct {
	*mock.Call
}

// MultipartMessage is a helper method to define mock.On call
func (_e *MockMultipartMessage_Expecter) MultipartMessage() *MockMultipartMessage_MultipartMessage_Call {
	return &MockMultipartMessage_MultipartMessage_Call{Call: _e.mock.On("MultipartMessage")}
}

func (_c *MockMultipartMessage_MultipartMessage_Call) Run(run func()) *MockMultipartMessage_MultipartMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultipartMessage_MultipartMessage_Call) Return(_a0 models.MultipartMessage) *MockMultipartMessage_MultipartMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMultipartMessage_MultipartMessage_Call) RunAndReturn(run func() models.MultipartMessage) *MockMultipartMessage_MultipartMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMultipartMessage creates a new instance of MockMultipartMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMultipartMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMultipartMessage {
	mock := &MockMultipartMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
