// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	golm "github.com/a-novel-kit/golm"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/a-novel-kit/golm/utils"
)

// MockChatBinding is an autogenerated mock type for the ChatBinding type
type MockChatBinding[RawRequest any, RawResponse any, StreamResponse any] struct {
	mock.Mock
}

type MockChatBinding_Expecter[RawRequest any, RawResponse any, StreamResponse any] struct {
	mock *mock.Mock
}

func (_m *MockChatBinding[RawRequest, RawResponse, StreamResponse]) EXPECT() *MockChatBinding_Expecter[RawRequest, RawResponse, StreamResponse] {
	return &MockChatBinding_Expecter[RawRequest, RawResponse, StreamResponse]{mock: &_m.Mock}
}

// Completion provides a mock function with given fields: ctx, message, options, history
func (_m *MockChatBinding[RawRequest, RawResponse, StreamResponse]) Completion(ctx context.Context, message golm.UserMessage, options golm.CompletionParams, history golm.ChatHistory) (*golm.AssistantMessage, error) {
	ret := _m.Called(ctx, message, options, history)

	if len(ret) == 0 {
		panic("no return value specified for Completion")
	}

	var r0 *golm.AssistantMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, golm.UserMessage, golm.CompletionParams, golm.ChatHistory) (*golm.AssistantMessage, error)); ok {
		return rf(ctx, message, options, history)
	}
	if rf, ok := ret.Get(0).(func(context.Context, golm.UserMessage, golm.CompletionParams, golm.ChatHistory) *golm.AssistantMessage); ok {
		r0 = rf(ctx, message, options, history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golm.AssistantMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, golm.UserMessage, golm.CompletionParams, golm.ChatHistory) error); ok {
		r1 = rf(ctx, message, options, history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatBinding_Completion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Completion'
type MockChatBinding_Completion_Call[RawRequest any, RawResponse any, StreamResponse any] struct {
	*mock.Call
}

// Completion is a helper method to define mock.On call
//   - ctx context.Context
//   - message golm.UserMessage
//   - options golm.CompletionParams
//   - history golm.ChatHistory
func (_e *MockChatBinding_Expecter[RawRequest, RawResponse, StreamResponse]) Completion(ctx interface{}, message interface{}, options interface{}, history interface{}) *MockChatBinding_Completion_Call[RawRequest, RawResponse, StreamResponse] {
	return &MockChatBinding_Completion_Call[RawRequest, RawResponse, StreamResponse]{Call: _e.mock.On("Completion", ctx, message, options, history)}
}

func (_c *MockChatBinding_Completion_Call[RawRequest, RawResponse, StreamResponse]) Run(run func(ctx context.Context, message golm.UserMessage, options golm.CompletionParams, history golm.ChatHistory)) *MockChatBinding_Completion_Call[RawRequest, RawResponse, StreamResponse] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(golm.UserMessage), args[2].(golm.CompletionParams), args[3].(golm.ChatHistory))
	})
	return _c
}

func (_c *MockChatBinding_Completion_Call[RawRequest, RawResponse, StreamResponse]) Return(response *golm.AssistantMessage, err error) *MockChatBinding_Completion_Call[RawRequest, RawResponse, StreamResponse] {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockChatBinding_Completion_Call[RawRequest, RawResponse, StreamResponse]) RunAndReturn(run func(context.Context, golm.UserMessage, golm.CompletionParams, golm.ChatHistory) (*golm.AssistantMessage, error)) *MockChatBinding_Completion_Call[RawRequest, RawResponse, StreamResponse] {
	_c.Call.Return(run)
	return _c
}

// CompletionStream provides a mock function with given fields: ctx, message, options, history
func (_m *MockChatBinding[RawRequest, RawResponse, StreamResponse]) CompletionStream(ctx context.Context, message golm.UserMessage, options golm.CompletionParams, history golm.ChatHistory) (<-chan StreamResponse, utils.StreamWaitFn) {
	ret := _m.Called(ctx, message, options, history)

	if len(ret) == 0 {
		panic("no return value specified for CompletionStream")
	}

	var r0 <-chan StreamResponse
	var r1 utils.StreamWaitFn
	if rf, ok := ret.Get(0).(func(context.Context, golm.UserMessage, golm.CompletionParams, golm.ChatHistory) (<-chan StreamResponse, utils.StreamWaitFn)); ok {
		return rf(ctx, message, options, history)
	}
	if rf, ok := ret.Get(0).(func(context.Context, golm.UserMessage, golm.CompletionParams, golm.ChatHistory) <-chan StreamResponse); ok {
		r0 = rf(ctx, message, options, history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan StreamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, golm.UserMessage, golm.CompletionParams, golm.ChatHistory) utils.StreamWaitFn); ok {
		r1 = rf(ctx, message, options, history)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.StreamWaitFn)
		}
	}

	return r0, r1
}

// MockChatBinding_CompletionStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompletionStream'
type MockChatBinding_CompletionStream_Call[RawRequest any, RawResponse any, StreamResponse any] struct {
	*mock.Call
}

// CompletionStream is a helper method to define mock.On call
//   - ctx context.Context
//   - message golm.UserMessage
//   - options golm.CompletionParams
//   - history golm.ChatHistory
func (_e *MockChatBinding_Expecter[RawRequest, RawResponse, StreamResponse]) CompletionStream(ctx interface{}, message interface{}, options interface{}, history interface{}) *MockChatBinding_CompletionStream_Call[RawRequest, RawResponse, StreamResponse] {
	return &MockChatBinding_CompletionStream_Call[RawRequest, RawResponse, StreamResponse]{Call: _e.mock.On("CompletionStream", ctx, message, options, history)}
}

func (_c *MockChatBinding_CompletionStream_Call[RawRequest, RawResponse, StreamResponse]) Run(run func(ctx context.Context, message golm.UserMessage, options golm.CompletionParams, history golm.ChatHistory)) *MockChatBinding_CompletionStream_Call[RawRequest, RawResponse, StreamResponse] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(golm.UserMessage), args[2].(golm.CompletionParams), args[3].(golm.ChatHistory))
	})
	return _c
}

func (_c *MockChatBinding_CompletionStream_Call[RawRequest, RawResponse, StreamResponse]) Return(response <-chan StreamResponse, wait utils.StreamWaitFn) *MockChatBinding_CompletionStream_Call[RawRequest, RawResponse, StreamResponse] {
	_c.Call.Return(response, wait)
	return _c
}

func (_c *MockChatBinding_CompletionStream_Call[RawRequest, RawResponse, StreamResponse]) RunAndReturn(run func(context.Context, golm.UserMessage, golm.CompletionParams, golm.ChatHistory) (<-chan StreamResponse, utils.StreamWaitFn)) *MockChatBinding_CompletionStream_Call[RawRequest, RawResponse, StreamResponse] {
	_c.Call.Return(run)
	return _c
}

// RawQuery provides a mock function with given fields: ctx, request, history
func (_m *MockChatBinding[RawRequest, RawResponse, StreamResponse]) RawQuery(ctx context.Context, request RawRequest, history golm.ChatHistory) (RawResponse, error) {
	ret := _m.Called(ctx, request, history)

	if len(ret) == 0 {
		panic("no return value specified for RawQuery")
	}

	var r0 RawResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, RawRequest, golm.ChatHistory) (RawResponse, error)); ok {
		return rf(ctx, request, history)
	}
	if rf, ok := ret.Get(0).(func(context.Context, RawRequest, golm.ChatHistory) RawResponse); ok {
		r0 = rf(ctx, request, history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RawResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, RawRequest, golm.ChatHistory) error); ok {
		r1 = rf(ctx, request, history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatBinding_RawQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawQuery'
type MockChatBinding_RawQuery_Call[RawRequest any, RawResponse any, StreamResponse any] struct {
	*mock.Call
}

// RawQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - request RawRequest
//   - history golm.ChatHistory
func (_e *MockChatBinding_Expecter[RawRequest, RawResponse, StreamResponse]) RawQuery(ctx interface{}, request interface{}, history interface{}) *MockChatBinding_RawQuery_Call[RawRequest, RawResponse, StreamResponse] {
	return &MockChatBinding_RawQuery_Call[RawRequest, RawResponse, StreamResponse]{Call: _e.mock.On("RawQuery", ctx, request, history)}
}

func (_c *MockChatBinding_RawQuery_Call[RawRequest, RawResponse, StreamResponse]) Run(run func(ctx context.Context, request RawRequest, history golm.ChatHistory)) *MockChatBinding_RawQuery_Call[RawRequest, RawResponse, StreamResponse] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(RawRequest), args[2].(golm.ChatHistory))
	})
	return _c
}

func (_c *MockChatBinding_RawQuery_Call[RawRequest, RawResponse, StreamResponse]) Return(response RawResponse, err error) *MockChatBinding_RawQuery_Call[RawRequest, RawResponse, StreamResponse] {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockChatBinding_RawQuery_Call[RawRequest, RawResponse, StreamResponse]) RunAndReturn(run func(context.Context, RawRequest, golm.ChatHistory) (RawResponse, error)) *MockChatBinding_RawQuery_Call[RawRequest, RawResponse, StreamResponse] {
	_c.Call.Return(run)
	return _c
}

// StreamResponseToMessage provides a mock function with given fields: response
func (_m *MockChatBinding[RawRequest, RawResponse, StreamResponse]) StreamResponseToMessage(response StreamResponse) string {
	ret := _m.Called(response)

	if len(ret) == 0 {
		panic("no return value specified for StreamResponseToMessage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(StreamResponse) string); ok {
		r0 = rf(response)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockChatBinding_StreamResponseToMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamResponseToMessage'
type MockChatBinding_StreamResponseToMessage_Call[RawRequest any, RawResponse any, StreamResponse any] struct {
	*mock.Call
}

// StreamResponseToMessage is a helper method to define mock.On call
//   - response StreamResponse
func (_e *MockChatBinding_Expecter[RawRequest, RawResponse, StreamResponse]) StreamResponseToMessage(response interface{}) *MockChatBinding_StreamResponseToMessage_Call[RawRequest, RawResponse, StreamResponse] {
	return &MockChatBinding_StreamResponseToMessage_Call[RawRequest, RawResponse, StreamResponse]{Call: _e.mock.On("StreamResponseToMessage", response)}
}

func (_c *MockChatBinding_StreamResponseToMessage_Call[RawRequest, RawResponse, StreamResponse]) Run(run func(response StreamResponse)) *MockChatBinding_StreamResponseToMessage_Call[RawRequest, RawResponse, StreamResponse] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(StreamResponse))
	})
	return _c
}

func (_c *MockChatBinding_StreamResponseToMessage_Call[RawRequest, RawResponse, StreamResponse]) Return(message string) *MockChatBinding_StreamResponseToMessage_Call[RawRequest, RawResponse, StreamResponse] {
	_c.Call.Return(message)
	return _c
}

func (_c *MockChatBinding_StreamResponseToMessage_Call[RawRequest, RawResponse, StreamResponse]) RunAndReturn(run func(StreamResponse) string) *MockChatBinding_StreamResponseToMessage_Call[RawRequest, RawResponse, StreamResponse] {
	_c.Call.Return(run)
	return _c
}

// NewMockChatBinding creates a new instance of MockChatBinding. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChatBinding[RawRequest any, RawResponse any, StreamResponse any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChatBinding[RawRequest, RawResponse, StreamResponse] {
	mock := &MockChatBinding[RawRequest, RawResponse, StreamResponse]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
